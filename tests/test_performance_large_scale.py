"""
大规模性能测试 - 测试10万级别的模糊查询性能
包括查询响应时间、内存使用量、准确性评估
"""
import gc
import time
import json
import random
import psutil
import os
import sys
import tracemalloc
from typing import List, Dict, Tuple, Any
from urllib.request import urlretrieve
from urllib.parse import urljoin
import zipfile
import tempfile
import pytest

# 添加项目根目录到路径
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from mohu import MohuMatcher


class PerformanceMetrics:
    """性能指标收集器"""
    
    def __init__(self):
        self.reset()
    
    def reset(self):
        self.query_times = []
        self.memory_usage = []
        self.build_time = 0
        self.accuracy_scores = []
    
    def add_query_time(self, time_ms: float):
        self.query_times.append(time_ms)
    
    def add_memory_usage(self, memory_mb: float):
        self.memory_usage.append(memory_mb)
    
    def add_accuracy_score(self, score: float):
        self.accuracy_scores.append(score)
    
    def get_summary(self) -> Dict[str, Any]:
        return {
            "avg_query_time_ms": sum(self.query_times) / len(self.query_times) if self.query_times else 0,
            "max_query_time_ms": max(self.query_times) if self.query_times else 0,
            "min_query_time_ms": min(self.query_times) if self.query_times else 0,
            "p95_query_time_ms": sorted(self.query_times)[int(len(self.query_times) * 0.95)] if self.query_times else 0,
            "p99_query_time_ms": sorted(self.query_times)[int(len(self.query_times) * 0.99)] if self.query_times else 0,
            "avg_memory_mb": sum(self.memory_usage) / len(self.memory_usage) if self.memory_usage else 0,
            "max_memory_mb": max(self.memory_usage) if self.memory_usage else 0,
            "build_time_s": self.build_time,
            "avg_accuracy": sum(self.accuracy_scores) / len(self.accuracy_scores) if self.accuracy_scores else 0,
            "total_queries": len(self.query_times)
        }


class ChineseWordDataset:
    """中文词汇数据集管理器"""
    
    def __init__(self, cache_dir: str = "/tmp/mohu_test_data"):
        self.cache_dir = cache_dir
        os.makedirs(cache_dir, exist_ok=True)
    
    def generate_chinese_words(self, size: int) -> List[str]:
        """生成中文词汇列表，混合常见词汇和生成词汇"""
        # 基础词汇种子
        base_words = [
            # 常见词汇
            "北京", "上海", "广州", "深圳", "杭州", "南京", "武汉", "成都", "重庆", "天津",
            "苹果", "香蕉", "橘子", "葡萄", "草莓", "西瓜", "桃子", "梨子", "柠檬", "芒果",
            "电脑", "手机", "汽车", "飞机", "火车", "地铁", "公交", "自行车", "摩托车", "轮船",
            "学校", "医院", "银行", "商店", "餐厅", "酒店", "公园", "图书馆", "博物馆", "体育馆",
            "工作", "学习", "娱乐", "运动", "旅游", "购物", "做饭", "睡觉", "读书", "看电影",
            "春天", "夏天", "秋天", "冬天", "早上", "中午", "下午", "晚上", "白天", "黑夜",
            "红色", "蓝色", "绿色", "黄色", "黑色", "白色", "紫色", "粉色", "灰色", "橙色",
            "开心", "快乐", "悲伤", "愤怒", "恐惧", "惊讶", "厌恶", "羞愧", "骄傲", "嫉妒",
            "父亲", "母亲", "儿子", "女儿", "爷爷", "奶奶", "叔叔", "阿姨", "哥哥", "姐姐",
            "朋友", "同事", "老师", "学生", "医生", "护士", "司机", "厨师", "警察", "消防员",
            # 常见姓氏
            "张", "王", "李", "赵", "刘", "陈", "杨", "黄", "周", "吴", "徐", "孙", "马", "朱", "胡",
            # 技术词汇
            "算法", "数据", "网络", "软件", "硬件", "编程", "代码", "系统", "数据库", "人工智能",
            "机器学习", "深度学习", "云计算", "大数据", "区块链", "物联网", "虚拟现实", "增强现实",
            # 商业词汇
            "公司", "企业", "市场", "销售", "营销", "管理", "财务", "投资", "股票", "基金",
            "经济", "金融", "贸易", "合作", "竞争", "创新", "发展", "策略", "品牌", "客户",
        ]
        
        # 常见单字
        chars = [
            "的", "一", "是", "在", "不", "了", "有", "和", "人", "这", "中", "大", "为", "上", "个",
            "国", "我", "以", "要", "他", "时", "来", "用", "们", "生", "到", "作", "地", "于", "出",
            "就", "分", "对", "成", "会", "可", "主", "发", "年", "动", "同", "工", "也", "能", "下",
            "过", "子", "说", "产", "种", "面", "而", "方", "后", "多", "定", "行", "学", "法", "所",
            "民", "得", "经", "十", "三", "之", "进", "着", "等", "部", "度", "家", "电", "力", "里",
            "如", "水", "化", "高", "自", "二", "理", "起", "小", "物", "现", "实", "加", "量", "都",
            "两", "体", "制", "机", "当", "使", "点", "从", "业", "本", "去", "把", "性", "好", "应",
            "开", "它", "合", "还", "因", "由", "其", "些", "然", "前", "外", "天", "政", "四", "日",
            "那", "社", "义", "事", "平", "形", "相", "全", "表", "间", "样", "与", "关", "各", "重",
            "新", "线", "内", "数", "正", "心", "反", "你", "明", "看", "原", "又", "么", "利", "比",
            "或", "但", "质", "气", "第", "向", "道", "命", "此", "变", "条", "只", "没", "结", "解",
            "问", "意", "建", "月", "公", "无", "系", "军", "很", "情", "者", "最", "立", "代", "想",
            "已", "通", "并", "提", "直", "题", "党", "程", "展", "五", "果", "料", "象", "员", "革",
            "位", "入", "常", "文", "总", "次", "品", "式", "活", "设", "及", "管", "特", "件", "长",
            "求", "老", "头", "基", "资", "边", "流", "路", "级", "少", "图", "山", "统", "接", "知",
            "较", "将", "组", "见", "计", "别", "她", "手", "角", "期", "根", "论", "运", "农", "指",
            "几", "九", "区", "强", "放", "决", "西", "被", "干", "做", "必", "战", "先", "回", "则",
            "任", "取", "据", "处", "队", "南", "给", "色", "光", "门", "即", "保", "治", "北", "造",
            "百", "规", "热", "领", "七", "海", "口", "东", "导", "器", "压", "志", "世", "金", "增",
            "争", "济", "阶", "油", "思", "术", "极", "交", "受", "联", "什", "认", "六", "共", "权",
            "收", "证", "改", "清", "美", "再", "采", "转", "更", "单", "风", "切", "打", "白", "教",
            "速", "花", "带", "安", "场", "身", "车", "例", "真", "务", "具", "万", "每", "目", "至",
            "达", "走", "积", "示", "议", "声", "报", "斗", "完", "类", "八", "离", "华", "名", "确",
            "才", "科", "张", "信", "马", "节", "话", "米", "整", "空", "元", "况", "今", "集", "温",
            "传", "土", "许", "步", "群", "广", "石", "记", "需", "段", "研", "界", "拉", "林", "律",
            "叫", "且", "究", "观", "越", "织", "装", "影", "算", "低", "持", "音", "众", "书", "布",
            "复", "容", "儿", "须", "际", "商", "非", "验", "连", "断", "深", "难", "近", "矿", "千",
            "周", "委", "素", "技", "备", "半", "办", "青", "省", "列", "习", "响", "约", "支", "般",
            "史", "感", "劳", "便", "团", "往", "酸", "历", "市", "克", "何", "除", "消", "构", "府",
            "称", "太", "准", "精", "值", "号", "率", "族", "维", "划", "选", "标", "写", "存", "候",
            "毛", "亲", "快", "效", "斯", "院", "查", "江", "型", "眼", "王", "按", "格", "养", "易",
            "置", "派", "层", "片", "始", "却", "专", "状", "育", "厂", "京", "识", "适", "属", "圆",
            "包", "火", "住", "调", "满", "县", "局", "照", "参", "红", "细", "引", "听", "该", "铁",
            "价", "严", "首", "底", "液", "官", "德", "随", "病", "苏", "失", "尔", "死", "讲", "配",
            "女", "黄", "推", "显", "谈", "罪", "神", "艺", "呢", "席", "含", "企", "望", "密", "批",
            "营", "项", "防", "举", "球", "英", "氧", "势", "告", "李", "台", "落", "木", "帮", "轮",
            "破", "亚", "师", "围", "注", "远", "字", "材", "排", "供", "河", "态", "封", "另", "施",
            "减", "树", "溶", "怎", "止", "案", "言", "士", "均", "武", "固", "叶", "鱼", "波", "视",
            "仅", "费", "紧", "爱", "左", "章", "早", "朝", "害", "续", "轻", "服", "试", "食", "充",
            "兵", "源", "判", "护", "司", "足", "某", "练", "差", "致", "板", "田", "降", "黑", "犯",
            "负", "击", "范", "继", "兴", "似", "余", "坚", "曲", "输", "修", "故", "城", "夫", "够",
            "送", "笔", "船", "占", "右", "财", "吃", "富", "春", "职", "觉", "汉", "画", "功", "巴",
            "跟", "虽", "杂", "飞", "检", "吸", "助", "升", "阳", "互", "初", "创", "抗", "考", "投",
            "坏", "策", "古", "径", "换", "未", "跑", "留", "钢", "曾", "端", "责", "站", "简", "述",
            "钱", "副", "尽", "帝", "射", "草", "冲", "承", "独", "令", "限", "阿", "宣", "环", "双",
            "请", "超", "微", "让", "控", "州", "良", "轴", "找", "否", "纪", "益", "依", "优", "顶",
            "础", "载", "倒", "房", "突", "坐", "粉", "敌", "略", "客", "袁", "冷", "胜", "绝", "析",
            "块", "剂", "测", "丝", "协", "诉", "念", "陈", "仍", "罗", "盐", "友", "洋", "错", "苦",
            "夜", "刑", "移", "频", "逐", "靠", "混", "母", "短", "皮", "终", "聚", "汽", "村", "云",
            "哪", "既", "距", "卫", "停", "烈", "央", "察", "烧", "迅", "境", "若", "印", "洲", "刻",
            "括", "激", "孔", "搞", "甚", "室", "待", "核", "校", "散", "侵", "吧", "甲", "游", "久",
            "菜", "味", "旧", "模", "湖", "货", "损", "预", "阻", "毫", "普", "稳", "乙", "妈", "植",
            "息", "扩", "银", "语", "挥", "酒", "守", "拿", "序", "纸", "医", "缺", "雨", "吗", "针",
            "刘", "啊", "急", "唱", "误", "训", "愿", "审", "附", "获", "茶", "鲜", "粮", "斤", "孩",
            "脱", "硫", "肥", "善", "龙", "演", "父", "渐", "血", "欢", "械", "掌", "歌", "沙", "刚",
            "攻", "谓", "盾", "讨", "晚", "粒", "乱", "燃", "矛", "乎", "杀", "药", "宁", "鲁", "贵",
            "钟", "煤", "读", "班", "伯", "香", "介", "迫", "句", "丰", "培", "握", "兰", "担", "弦",
            "蛋", "沉", "假", "穿", "执", "答", "乐", "谁", "顺", "烟", "缩", "征", "脸", "喜", "松",
            "脚", "困", "异", "免", "背", "星", "福", "买", "染", "井", "概", "慢", "怕", "磁", "倍",
            "祖", "皇", "促", "静", "补", "评", "翻", "肉", "践", "尼", "衣", "宽", "扬", "棉", "希",
            "伤", "操", "垂", "秋", "宜", "氢", "套", "督", "振", "架", "亮", "末", "宪", "庆", "编",
            "牛", "触", "映", "雷", "销", "诗", "座", "居", "抓", "裂", "胞", "呼", "娘", "景", "威",
            "绿", "晶", "厚", "盟", "衡", "鸡", "孙", "延", "危", "胶", "屋", "乡", "临", "陆", "顾",
            "掉", "呀", "灯", "岁", "措", "束", "耐", "剧", "玉", "赵", "跳", "哥", "季", "课", "凯",
            "胡", "额", "款", "绍", "卷", "齐", "伟", "蒸", "殖", "永", "宗", "苗", "川", "炉", "岩",
            "弱", "零", "杨", "奏", "沿", "露", "杆", "探", "滑", "镇", "饭", "浓", "航", "怀", "赶",
            "库", "夺", "伊", "灵", "税", "途", "灭", "赛", "归", "召", "鼓", "播", "盘", "裁", "险",
            "康", "唯", "录", "菌", "纯", "借", "糖", "盖", "横", "符", "私", "努", "堂", "域", "枪",
            "润", "幅", "哈", "竟", "熟", "虫", "泽", "脑", "壤", "碳", "欧", "遍", "侧", "寨", "敢",
            "彻", "虑", "斜", "薄", "庭", "纳", "弹", "饲", "伸", "折", "麦", "湿", "暗", "荷", "瓦",
            "塞", "床", "筑", "恶", "户", "访", "塔", "奇", "透", "梁", "刀", "旋", "迹", "卡", "氯",
            "遇", "份", "毒", "泥", "退", "洗", "摆", "灰", "彩", "卖", "耗", "夏", "择", "忙", "铜",
            "献", "硬", "予", "繁", "圈", "雪", "函", "亦", "抽", "篇", "阵", "阴", "丁", "尺", "追",
            "堆", "雄", "迎", "泛", "爸", "楼", "避", "谋", "吨", "野", "猪", "旗", "累", "偏", "典",
            "馆", "索", "秦", "脂", "潮", "爷", "豆", "忽", "托", "惊", "塑", "遗", "愈", "朱", "替",
            "纤", "粗", "倾", "尚", "痛", "楚", "谢", "奋", "购", "磨", "君", "池", "旁", "碎", "骨",
            "监", "捕", "弟", "暴", "割", "贯", "殊", "释", "词", "亡", "壁", "顿", "宝", "午", "尘",
            "闻", "揭", "炮", "残", "冬", "桥", "妇", "警", "综", "招", "吴", "付", "浮", "遭", "徐",
            "您", "摇", "谷", "赞", "箱", "隔", "订", "男", "吹", "园", "纷", "唐", "败", "宋", "玻",
            "巨", "耕", "坦", "荣", "闭", "湾", "键", "凡", "驻", "锅", "救", "恩", "剥", "凝", "碱",
            "齿", "截", "炼", "麻", "纺", "禁", "废", "盛", "版", "缓", "净", "睛", "昌", "婚", "涉",
            "筒", "嘴", "插", "岸", "朗", "庄", "街", "藏", "姑", "贸", "腐", "奴", "啦", "惯", "乘",
            "伙", "恢", "匀", "纱", "扎", "辩", "耳", "彪", "臣", "亿", "璃", "抵", "脉", "秀", "萨",
            "俄", "网", "舞", "店", "喷", "纵", "寸", "汗", "挂", "洪", "贺", "闪", "柬", "爆", "烯",
            "津", "稻", "墙", "软", "勇", "像", "滚", "厘", "蒙", "芳", "肯", "坡", "柱", "荡", "腿",
            "仪", "旅", "尾", "轧", "冰", "贡", "登", "黎", "削", "钻", "勒", "逃", "障", "氨", "郭",
            "峰", "币", "港", "伏", "轨", "亩", "毕", "擦", "莫", "刺", "浪", "秘", "援", "株", "健",
            "售", "股", "岛", "甘", "泡", "睡", "童", "铸", "汤", "阀", "休", "汇", "舍", "牧", "绕",
            "炸", "哲", "磷", "绩", "朋", "淡", "尖", "启", "陷", "柴", "呈", "徒", "颜", "泪", "稍",
            "忘", "泵", "蓝", "拖", "洞", "授", "镜", "辛", "壮", "锋", "贫", "虚", "弯", "摩", "泰",
            "幼", "廷", "尊", "窗", "纲", "弄", "隶", "疑", "氏", "宫", "姐", "震", "瑞", "怪", "尤",
            "琴", "循", "描", "膜", "违", "夹", "腰", "缘", "珠", "穷", "森", "枝", "竹", "沟", "催",
            "绳", "忆", "邦", "剩", "幸", "浆", "栏", "拥", "牙", "贮", "礼", "滤", "钠", "纹", "罢",
            "拍", "咱", "喊", "袖", "埃", "勤", "罚", "焦", "潜", "伍", "墨", "欲", "缝", "姓", "刊",
            "饱", "仿", "奖", "铝", "鬼", "丽", "跨", "默", "挖", "链", "扫", "喝", "袋", "炭", "污",
            "幕", "诸", "弧", "励", "梅", "奶", "洁", "灾", "舟", "鉴", "苯", "讼", "抱", "毁", "懂",
            "寒", "智", "埔", "寄", "届", "跃", "渡", "挑", "丹", "艰", "贝", "碰", "拔", "爹", "戴",
            "码", "梦", "芽", "熔", "赤", "渔", "哭", "敬", "颗", "奔", "铅", "仲", "虎", "稀", "妹",
            "乏", "珍", "申", "桌", "遵", "允", "隆", "螺", "仓", "魏", "锐", "晓", "氮", "兼", "隐",
            "碍", "赫", "拨", "忠", "肃", "缸", "牵", "抢", "博", "巧", "壳", "兄", "杜", "讯", "诚",
            "碧", "祥", "柯", "页", "巡", "矩", "悲", "灌", "龄", "伦", "票", "寻", "桂", "铺", "圣",
            "恐", "恰", "郑", "趣", "抬", "荒", "腾", "贴", "柔", "滴", "猛", "阔", "辆", "妻", "填",
            "撤", "储", "签", "闹", "扰", "紫", "砂", "递", "戏", "吊", "陶", "伐", "喂", "疗", "瓶",
            "婆", "抚", "臂", "摸", "忍", "虾", "蜡", "邻", "胸", "巩", "挤", "偶", "弃", "槽", "劲",
            "乳", "邓", "吉", "仁", "烂", "砖", "租", "乌", "舰", "伴", "瓜", "浅", "丙", "暂", "燥",
            "橡", "柳", "迷", "暖", "牌", "秧", "胆", "详", "簧", "踏", "瓷", "谱", "呆", "宾", "糊",
            "洛", "辉", "愤", "竞", "隙", "怒", "粘", "乃", "绪", "肩", "籍", "敏", "涂", "熙", "皆",
            "侦", "悬", "掘", "享", "纠", "醒", "狂", "锁", "淀", "恨", "牲", "霸", "爬", "赏", "逆",
            "玩", "陵", "祝", "秒", "浙", "貌", "役", "彼", "悉", "鸭", "趋", "凤", "晨", "畜", "辈",
            "秩", "卵", "署", "梯", "炎", "滩", "棋", "驱", "筛", "峡", "冒", "啥", "寿", "译", "浸",
            "泉", "帽", "迟", "硅", "疆", "贷", "漏", "稿", "冠", "嫩", "胁", "芯", "牢", "叛", "蚀",
            "奥", "鸣", "岭", "羊", "凭", "串", "塘", "绘", "酵", "融", "盆", "锡", "庙", "筹", "冻",
            "辅", "摄", "袭", "筋", "拒", "僚", "旱", "钾", "鸟", "漆", "沈", "眉", "疏", "添", "棒",
            "穗", "硝", "韩", "逼", "扭", "侨", "凉", "挺", "碗", "栽", "炒", "杯", "患", "馏", "劝",
            "豪", "辽", "勃", "鸿", "旦", "吏", "拜", "狗", "埋", "辊", "掩", "饮", "搬", "骂", "辞",
            "勾", "扣", "估", "蒋", "绒", "雾", "丈", "朵", "姆", "拟", "宇", "辑", "陕", "雕", "偿",
            "蓄", "崇", "剪", "倡", "厅", "咬", "驶", "薯", "刷", "斥", "番", "赋", "奉", "佛", "浇",
            "漫", "曼", "扇", "钙", "桃", "扶", "仔", "返", "俗", "亏", "腔", "鞋", "棱", "覆", "框",
            "悄", "叔", "撞", "骗", "勘", "旺", "沸", "孤", "吐", "孟", "渠", "屈", "疾", "妙", "惜",
            "仰", "狠", "胀", "谐", "抛", "霉", "桑", "岗", "嘛", "衰", "盗", "渗", "脏", "赖", "涌",
            "甜", "曹", "阅", "肌", "哩", "厉", "烃", "纬", "毅", "昨", "伪", "症", "煮", "叹", "钉",
            "搭", "茎", "笼", "酷", "偷", "弓", "锥", "恒", "杰", "坑", "鼻", "翼", "纶", "叙", "狱",
            "逮", "罐", "络", "棚", "抑", "膨", "蔬", "寺", "骤", "穆", "冶", "枯", "册", "尸", "凸",
            "绅", "坯", "牺", "焰", "轰", "欣", "晋", "瘦", "御", "锭", "锦", "丧", "旬", "锻", "垄",
            "搜", "扑", "邀", "亭", "酯", "迈", "舒", "脆", "酶", "闲", "忧", "酚", "顽", "羽", "涨",
            "卸", "仗", "陪", "辟", "惩", "杭", "姿", "肆", "鸦", "永", "宗", "苗", "川", "炉", "岩",
        ]
        
        words = set()
        
        # 首先添加所有基础词汇
        words.update(base_words)
        
        # 生成组合词汇
        while len(words) < size:
            # 随机组合1-4个字符
            word_length = random.choice([1, 1, 2, 2, 2, 3, 3, 4])  # 偏向短词
            if word_length == 1:
                word = random.choice(chars)
            else:
                word = ''.join(random.choices(chars, k=word_length))
            
            # 添加一些基础词汇的变形
            if len(words) % 100 == 0 and base_words:
                base = random.choice(base_words)
                if random.choice([True, False]):
                    # 添加前缀
                    word = random.choice(chars) + base
                else:
                    # 添加后缀
                    word = base + random.choice(chars)
            
            # 确保词汇长度合理（1-8字符）
            if 1 <= len(word) <= 8:
                words.add(word)
        
        return list(words)[:size]
    
    def get_common_queries(self) -> List[str]:
        """获取常见查询词汇，用于测试"""
        return [
            # 常见查询
            "北京", "上海", "深圳", "成都", "苹果", "香蕉", "电脑", "手机",
            # 部分字符
            "北", "上", "深", "成", "苹", "香", "电", "手",
            # 拼音查询
            "beijing", "shanghai", "shenzhen", "chengdu", "pingguo", "xiangjiao",
            # 模糊查询（带错误）
            "北经", "上下", "深川", "成功", "苹果汁", "香焦", "电脑桌", "手机号",
            # 更多测试词汇
            "学校", "医院", "银行", "公园", "家", "工作", "朋友", "时间",
            "xue", "yi", "yin", "gong", "jia", "gong", "peng", "shi",
            "学", "医", "银", "公", "家", "工", "朋", "时",
            "学生", "医生", "银行卡", "公司", "朋友圈", "工作日", "时间表",
        ]


class PerformanceTester:
    """大规模性能测试器"""
    
    def __init__(self):
        self.dataset = ChineseWordDataset()
        self.results = {}
    
    def test_scale(self, word_count: int, query_count: int = 1000, max_distance: int = 2) -> Dict[str, Any]:
        """测试指定规模的性能"""
        print(f"\n{'='*50}")
        print(f"开始测试 {word_count:,} 词汇规模")
        print(f"{'='*50}")
        
        metrics = PerformanceMetrics()
        
        # 生成测试数据
        print("生成测试词汇...")
        words = self.dataset.generate_chinese_words(word_count)
        queries = self.dataset.get_common_queries()
        
        # 确保有足够的查询
        while len(queries) < query_count:
            queries.extend(random.choices(words, k=min(100, query_count - len(queries))))
        queries = queries[:query_count]
        
        # 创建匹配器
        matcher = MohuMatcher(max_distance=max_distance, ignore_tones=True)
        
        # 测试构建时间
        print("构建索引...")
        start_time = time.time()
        tracemalloc.start()
        
        matcher.build(words)
        
        current, peak = tracemalloc.get_traced_memory()
        tracemalloc.stop()
        
        build_time = time.time() - start_time
        metrics.build_time = build_time
        
        build_memory_mb = peak / 1024 / 1024
        
        print(f"构建完成: {build_time:.2f}s, 内存使用: {build_memory_mb:.1f}MB")
        
        # 预热
        print("预热查询...")
        for _ in range(10):
            matcher.match(random.choice(queries), mode='hybrid')
        
        # 测试查询性能
        print(f"执行 {query_count} 次查询测试...")
        
        process = psutil.Process()
        
        total_accuracy = 0
        found_count = 0
        
        for i, query in enumerate(queries):
            if i % 200 == 0:
                print(f"  进度: {i}/{query_count}")
            
            # 记录内存使用
            memory_info = process.memory_info()
            memory_mb = memory_info.rss / 1024 / 1024
            metrics.add_memory_usage(memory_mb)
            
            # 执行查询并记录时间
            start_time = time.time()
            results = matcher.match(query, mode='hybrid', max_results=10)
            end_time = time.time()
            
            query_time_ms = (end_time - start_time) * 1000
            metrics.add_query_time(query_time_ms)
            
            # 计算准确性（如果找到结果）
            if results:
                found_count += 1
                # 简单的准确性评估：最高分数
                top_score = results[0][1]
                total_accuracy += top_score
        
        # 计算平均准确性
        if found_count > 0:
            avg_accuracy = total_accuracy / found_count
            metrics.add_accuracy_score(avg_accuracy)
        
        # 清理内存
        del matcher
        gc.collect()
        
        # 生成报告
        summary = metrics.get_summary()
        summary.update({
            "word_count": word_count,
            "query_count": query_count,
            "max_distance": max_distance,
            "build_memory_mb": build_memory_mb,
            "found_rate": found_count / query_count if query_count > 0 else 0
        })
        
        print(f"测试完成!")
        print(f"  平均查询时间: {summary['avg_query_time_ms']:.2f}ms")
        print(f"  P95查询时间: {summary['p95_query_time_ms']:.2f}ms")
        print(f"  P99查询时间: {summary['p99_query_time_ms']:.2f}ms")
        print(f"  平均内存使用: {summary['avg_memory_mb']:.1f}MB")
        print(f"  构建内存: {summary['build_memory_mb']:.1f}MB")
        print(f"  查询成功率: {summary['found_rate']:.1%}")
        print(f"  平均准确性: {summary['avg_accuracy']:.3f}")
        
        return summary
    
    def run_comprehensive_test(self) -> Dict[str, Any]:
        """运行全面的性能测试"""
        print("=" * 70)
        print("MOHU 大规模性能测试")
        print("=" * 70)
        
        test_cases = [
            {"word_count": 1000, "query_count": 500, "max_distance": 2},
            {"word_count": 5000, "query_count": 800, "max_distance": 2},
            {"word_count": 10000, "query_count": 1000, "max_distance": 2},
            {"word_count": 50000, "query_count": 1200, "max_distance": 2},
            {"word_count": 100000, "query_count": 1500, "max_distance": 2},
        ]
        
        all_results = {}
        
        for test_case in test_cases:
            try:
                result = self.test_scale(**test_case)
                all_results[test_case["word_count"]] = result
            except Exception as e:
                print(f"测试 {test_case['word_count']} 词汇时出错: {e}")
                all_results[test_case["word_count"]] = {"error": str(e)}
        
        # 测试不同编辑距离的性能影响
        print(f"\n{'='*50}")
        print("测试不同编辑距离的性能影响")
        print(f"{'='*50}")
        
        distance_results = {}
        for distance in [1, 2, 3, 5]:
            try:
                print(f"\n测试编辑距离 {distance}...")
                result = self.test_scale(10000, 500, distance)
                distance_results[distance] = result
            except Exception as e:
                print(f"测试编辑距离 {distance} 时出错: {e}")
                distance_results[distance] = {"error": str(e)}
        
        return {
            "scale_results": all_results,
            "distance_results": distance_results,
            "test_time": time.strftime("%Y-%m-%d %H:%M:%S")
        }


def test_performance_small_scale():
    """小规模快速测试，用于CI"""
    tester = PerformanceTester()
    result = tester.test_scale(1000, 100, 2)
    
    # 基本性能要求
    assert result["avg_query_time_ms"] < 50, f"查询时间过长: {result['avg_query_time_ms']:.2f}ms"
    assert result["avg_memory_mb"] < 200, f"内存使用过多: {result['avg_memory_mb']:.1f}MB"
    assert result["found_rate"] > 0.5, f"查询成功率过低: {result['found_rate']:.1%}"


def test_performance_medium_scale():
    """中等规模测试"""
    tester = PerformanceTester()
    result = tester.test_scale(10000, 500, 2)
    
    # 性能目标
    assert result["avg_query_time_ms"] < 100, f"查询时间过长: {result['avg_query_time_ms']:.2f}ms"
    assert result["avg_memory_mb"] < 300, f"内存使用过多: {result['avg_memory_mb']:.1f}MB"


if __name__ == "__main__":
    # 运行完整的性能测试
    tester = PerformanceTester()
    results = tester.run_comprehensive_test()
    
    # 保存结果
    output_file = "performance_test_results.json"
    with open(output_file, "w", encoding="utf-8") as f:
        json.dump(results, f, ensure_ascii=False, indent=2)
    
    print(f"\n{'='*70}")
    print(f"测试完成！结果已保存到: {output_file}")
    print(f"{'='*70}") 